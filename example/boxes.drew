#!/usr/local/bin/drew
version:0.1
profile:"dml"

_on_init(){
	if arg ~= nil then
		spaces = tonumber(arg[1])
		padds = tonumber(arg[2])
	else
		cout.print("arg is nil")
		spaces = 0
		padds = 0
	end
	cout.print("spaces:".. spaces)
	cout.print("padds:".. padds)
}

window{
	border:10
	title:"hello buttons"
	_before_destroy(){
		log.verbose("delete-devent occurred")
		return false
	}
	_on_destroy(){
		log.debug("quit")
		gui.quit()
	}
	vbox{
		label{
			text:"gtk_hbox_new(FALSE,0)"
			_on_init(){
				cout.print("label init")
				this:text("gtk_hbox_new(FALSE,"..spaces..")")
			}
		}
		hbox{
			homogeneous:false
			expand:false
			fill:false
			_on_init(){
				this:spacing(spaces)
				this:padding(padds)
				cout.print("spacing:" .. this:spacing())
				cout.print("padding:" .. this:padding())
			}
			button{ label:"gtk_box_pack" }
			button{ label:"(box," }
			button{ label:"button," }
			button{ label:"FALSE," }
			button{ label:"FALSE," }
			button{
				label:"0)"
				_on_init(){
					this:label(padds..")")
				}
			}
		}
		hbox{
			homogeneous:false
			expand:true
			fill:false
			_on_init(){
				this:spacing(spaces)
				this:padding(padds)
				cout.print("spacing:" .. this:spacing())
				cout.print("padding:" .. this:padding())
			}
			button{ label:"gtk_box_pack" }
			button{ label:"(box," }
			button{ label:"button," }
			button{ label:"TRUE," }
			button{ label:"FALSE," }
			button{
				label:"0)"
				_on_init(){
					this:label(padds..")")
				}
			}
		}
		hbox{
			homogeneous:false
			expand:true
			fill:true
			_on_init(){
				this:spacing(spaces)
				this:padding(padds)
				cout.print("spacing:" .. this:spacing())
				cout.print("padding:" .. this:padding())
			}
			button{ label:"gtk_box_pack" }
			button{ label:"(box," }
			button{ label:"button," }
			button{ label:"TRUE," }
			button{ label:"TRUE," }
			button{
				label:"0)"
				_on_init(){
					this:label(padds..")")
				}
			}
		}
		hseparator{}
		label{
			text:"gtk_hbox_new(TRUE,0)"
			_on_init(){
				this:text("gtk_hbox_new(FALSE,"..spaces..")")
			}
		}
		hbox{
			homogeneous:true
			expand:false
			fill:false
			_on_init(){
				this:spacing(spaces)
				this:padding(padds)
				cout.print("spacing:" .. this:spacing())
				cout.print("padding:" .. this:padding())
			}
			button{ label:"gtk_box_pack" }
			button{ label:"(box," }
			button{ label:"button," }
			button{ label:"FALSE," }
			button{ label:"FALSE," }
			button{
				label:"0)"
				_on_init(){
					this:label(padds..")")
				}
			}
		}
		hbox{
			homogeneous:true
			expand:true
			fill:false
			_on_init(){
				this:spacing(spaces)
				this:padding(padds)
				cout.print("spacing:" .. this:spacing())
				cout.print("padding:" .. this:padding())
			}
			button{ label:"gtk_box_pack" }
			button{ label:"(box," }
			button{ label:"button," }
			button{ label:"TRUE," }
			button{ label:"FALSE," }
			button{
				label:"0)"
				_on_init(){
					this:label(padds..")")
				}
			}
		}
		hbox{
			homogeneous:true
			expand:true
			fill:true
			_on_init(){
				this:spacing(spaces)
				this:padding(padds)
				cout.print("spacing:" .. this:spacing())
				cout.print("padding:" .. this:padding())
			}
			button{ label:"gtk_box_pack" }
			button{ label:"(box," }
			button{ label:"button," }
			button{ label:"TRUE," }
			button{ label:"TRUE," }
			button{
				label:"0)"
				_on_init(){
					this:label(padds..")")
				}
			}
		}
	}
}
