#!/bin/bash

#The MIT License (MIT)
#
#Copyright (c) 2013 drew
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#the Software, and to permit persons to whom the Software is furnished to do so,
#subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

MK=Makefile
MK_IN=$MK.in

LIBLUA=lua5.1

PREFIX=/usr/local

DEVS="lintian fakeroot dpkg-dev"

PACKAGE_NAME=drew
PACKAGE_VERSION=0.2.1
DML_VERSION=0.2
CORES=`cat /proc/cpuinfo | grep processor | wc -l`
PACKAGE_ROOT_DIR=/dist
LSB_RELEASE_PATH=/etc/lsb-release
VERBOSE=false

if [ -f "$LSB_RELEASE_PATH" ]
then
	HOST_ARCH=`dpkg-architecture -qDEB_HOST_ARCH`
	HOST_OS=`grep DISTRIB_ID /etc/lsb-release | sed 's/DISTRIB_ID=//'`
	HOST_OS_VERSION=`grep DISTRIB_RELEASE /etc/lsb-release | sed 's/DISTRIB_RELEASE=//'`
else
	HOST_ARCH=`uname -m`
        HOST_OS=${DEV_OS#*_}                                                                                                                     
	HOST_OS=${HOST_OS%-*}                                                                                                                    
	HOST_OS_VERSION=${DEV_OS#*-}                                                                                                             
fi

. config-$HOST_OS-$HOST_OS_VERSION.sh

DEBIAN_PACKAGE=$PACKAGE_NAME-v$PACKAGE_VERSION-$HOST_OS-$HOST_OS_VERSION-$HOST_ARCH.$PACKAGE_EXTENSION

function init_luajit(){
	SCRIPT_INCS=`pkg-config --cflags luajit`
	test "$VERBOSE" == false || echo luajit includes : $SCRIPT_INCS
	SCRIPT_LIBSS=`pkg-config --libs luajit`
	test "$VERBOSE" == false || echo luajit libraries : $SCRIPT_LIBSS
}

function init_lua(){
	SCRIPT_INCS=`pkg-config --cflags lua5.1`
	test "$VERBOSE" == false || echo lua includes : $SCRIPT_INCS
	SCRIPT_LIBSS=`pkg-config --libs lua5.1`
	test "$VERBOSE" == false || echo lua libraries : $SCRIPT_LIBSS
}

function init_gtk(){
	UI_INCS=`pkg-config --cflags gtk+-2.0`
	test "$VERBOSE" == false || echo gtk includes : $UI_INCS
	UI_LIBS=`pkg-config --libs gtk+-2.0`
	test "$VERBOSE" == false || echo gtk libraries : $UI_LIBS
}

function config_runner(){
	sed "s#@script_libs@#$SCRIPT_LIBSS#g;
		s#@root@#$PREFIX#g;
		s#@bin@#$INST_BIN#g;
		s#@ui_libs@#$UI_LIBS#g"< runner/$MK_IN > runner/$MK
	echo "runner:$MK_IN ==> $MK"
}

function config_script(){
	sed "s#@script_incs@#$SCRIPT_INCS#g" < script/$MK_IN > script/$MK
	echo "script:$MK_IN ==> $MK"
}

function config_dml(){
	cp dml/$MK_IN  dml/$MK
	echo "dml:$MK_IN ==> $MK"
}

function config_utility(){
	cp utility/$MK_IN  utility/$MK
	echo "utility:$MK_IN ==> $MK"
}

function config_engine(){
	sed "s#@ui_incs@#$UI_INCS#g;" < engine/$MK_IN > engine/$MK
	echo "engine:$MK_IN ==> $MK"
}

function config_example(){
	sed "s#@root@#$PREFIX#g;
		s#@example@#$INST_EXAMPLE#g;" < example/$MK_IN > example/$MK
	echo "example:$MK_IN ==> $MK"
}

function config_main(){
	sed "s#@pkg_format@#$PACKAGE_FORMAT#g;
		s#@cores@#$CORES#g" < $MK_IN > $MK
	echo "$MK_IN ==> $MK"
}

function config_header(){
	sed "s#@version@#$PACKAGE_VERSION#g;
		s#@dml_version@#$DML_VERSION#g;
		s#@name@#$PACKAGE_NAME#g;
		s#@arch@#$HOST_ARCH#g;" < config.h.in > config.h
}

function show_help(){
	echo "configure [options]"
	echo "-h, --help	show help screen(this screen)"
	echo "-l, --with-lua	force to use lua instead of luajit"
	echo "--prefix		sets install directory"
	echo "-v, --verbose	run verbosely"
}

for ARG in $@
do
	case $ARG in
		--help | -h)
			show_help
			exit 0
			;;
		--with-lua | -l)
			SCRIPT_ENGINE=lua
			;;
		--setup-env | -s)
			config_tools
			;;
		--verbose | -v)
			VERBOSE=true
			;;
		--prefix=*)
			PREFIX=${ARG#*=}
			;;
	esac
done


if [ "$SCRIPT_ENGINE" == "lua" ]
then
	init_lua
	PACKAGE_DEPENDS+=",$PACKAGE_DEPENDS_LUA"
else
	init_luajit
	PACKAGE_DEPENDS+=",$PACKAGE_DEPENDS_LUAJIT"
fi
PACKAGE_DEPENDS+=",libc6(>=2.15)"

init_gtk
config_dml
config_utility
config_header
config_runner
config_engine
config_script
config_package
config_example
config_main
